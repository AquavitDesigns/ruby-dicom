Ruby DICOM is a small and simple library for handling DICOM files (reading, editing
and writing) and DICOM network communication (both client and server side).
It is written completely in Ruby and has no external dependencies.

Copyright 2008-2010 Christoffer LervÃ¥g (chris.lervag [@nospam] @gmail.com)

INSTALLATION

gem install dicom

*************************************************************************

DOCUMENTATION

CLASS DObject

PUBLIC CLASS METHODS

  new(filename, options={})

    Initialize a new DICOM object.
    Example 1: (The simplest way)
      require 'dicom'
      obj = DICOM::DObject.new("myFile.dcm")
    Example 2: (Reading a DICOM file that has already been loaded into memory in a binary string)
      obj = DICOM::DObject.new(bin_data, :bin => true, :syntax => syntax_string)
    Example 3: (Open an empty DICOM object & choose non-verbose behaviour)
      obj = DICOM::DObject.new(nil, :verbose => false)

ACCESSORS (read only)
  :read_success
    A boolean that is true if DICOM object was read successfully, and false if not.
  :write_success
    A boolean that is true if DICOM object was written successfully, and false if not.
  :errors
    An array holding any error messages, warnings or notices that have been logged
    during your interaction with DObject.
  :modality
    A string which holds the description of the modality of the DICOM object that has been read.
    Example of use:
      obj = DICOM::DObject.new("myFile.dcm")
      if obj.read_success
        puts obj.modality
      end
  The following accessors are the arrays that hold all the information gathered on the DICOM object.
  As such, their length is equal to the number of tags in a DICOM object.
  :names
  :tags
  :types
  :lengths
  :values
  :bin
  :levels

PUBLIC INSTANCE METHODS

  children(element, options={})
    Returns the positions of all data elements inside the hierarchy of a sequence or an item.
    This is useful if you later want to get the position(s) of a certain element,
    restricted to the positions inside the given sequence or item.
    Element may be an array index, element name or element tag.
    Example 1: (Return all element positions that is contained in the following sequence)
      pos = obj.children("3006,0082")
    Example 2: (Return all element positions that is contained only directly beneath the following sequence)
      pos = obj.children("3006,0082", :next_only => true)

  get_bin(element, options={})
    Returns the unprocessed, binary string of the requested DICOM data element.
    Element may be an array index, element name or element tag.
    If you wish to return multiple data values of a tag that occurs several times in the file,
    use the keyword :array => true .
    Example: (Returns all data values in a array)
      contour_data = obj.get_bin("3006,0050", :array => true)

  get_frames
    Returns the number of frames present in the image data in the DICOM file.

  get_image(options={})
    Returns a standard Ruby array with the pixel data, where the length of the array corresponds
    with the number of pixels in the image.
    Example 1: (Retrieve the pixel data)
      pixels = obj.get_image
    Example 2: (Retrieve the pixel data rescaled to presentation values according to window center/width settings)
      pixels = obj.get_image(:rescale => true)
    Example 3: (Retrieve the rescaled pixel data and using a numerical array in the rescaling process (~2 times faster))
      pixels = obj.get_image(:rescale => true, :narray => true)

  get_image_magick(options={})
    Returns an array of RMagick image objects, where the size of the array corresponds
    with the number of frames in the image data.
    To call this method the user needs to have loaded the RMagick bindings in advance (require 'RMagick').
    Example 1: (Retrieve object and display first frame)
      require 'RMagick'
      images = obj.get_image_magick
      images[0].display
    Example 2: (Retrieve image object rescaled to presentation values according to window center/width settings)
      images = obj.get_image_magick(:rescale => true)
    Example 3: (Retrieve rescaled image object and using a numerical array in the rescaling process (~2 times faster))
      images = obj.get_image_magick(:rescale => true, :narray => true)

  get_image_narray(options={})
    Returns a 3d NArray object where the array dimensions are related to [frames, columns, rows].
    To call this method the user needs to have loaded the NArray library in advance (require 'narray').
    Example 1: (Retrieve object and display first frame):
      require 'narray'
      require 'nimage'
      data = obj.get_image_narray
      NImage.show data[0,true,true]
    Example 2: (Retrieve numerical array rescaled from the original pixel values to presentation values)
      data = obj.get_image_narray(:rescale => true)

  get_image_pos
    Returns the index(es) of the data element(s) that contain image data.

  get_pos(string, options={})
    Returns the index(es) of the data element(s) in the DICOM file that match
    the supplied element tag or name.
    Example 1: (Find all occurences of the specified tag in the object)
      pos = obj.get_pos("3006,0080")
    Example 2: (Find all occurences of the specified tag inside the specified sequence)
      mySelection = obj.children("3006,0082")
      pos = obj.get_pos("3006,0080", :selection => mySelection)
    Example 3: (Same as above, but slightly more concise using the :parent option)
      pos = obj.get_pos("3006,0080", :parent => "3006,0082")
    Example 4: (Using the :partial argument to find position of all elements containing a specific string)
      pos = obj.get_pos("0010", :partial => true)
      pos = obj.get_pos("Name", :partial => true)

  get_value(element)
    Returns the value (processed binary data) of the requested DICOM data element.
    Element may be an array index, element name or element tag.
    If you wish to return multiple values of a tag that occurs several times in the file,
    use the keyword :array => true .
    Example: (Returns all data values in a array)
      contour_data = obj.get_value("3006,0050", :array => true)

  image_to_file(file)
    Dumps the pixel data of the DICOM object directly to the specified file.
    This is useful if you wish to extract this data to process it with another program.

  parents(element)
    Returns the positions of all parents of this tag in the hierarchy.
    This is useful if you want to know the position of the items or sequence tags that 'hold' your tag.
    Element may be an array index, element name or element tag.
    Example:
      pos = obj.parents("300C,0006")

  print(pos, options={})
    Prints the information gathered on one or several/all tag(s) in the DICOM object:
      (index, [hierarchy level,] label, name, type, length, value)
    The method can print to both screen or to a text file. If print to file is chosen,
    the text file will be put in the folder of the original DICOM file with a '.txt' extension.
    The argument pos may be a number (array position), an array of numbers, or true.
    Example 1: (Print all tags to file, with both tree visualization and level numbers)
      obj.print(true, :levels => true, :tree => true, :file => true)
    Example 2: (Print an array of tags to screen, no level or tree visualization)
      obj.print([4,5,6])

  print_all
    Prints information of all tags stored in the DICOM object to the screen.

  print_properties
    Prints the key structural properties of the DICOM file to the screen.

  remove(element, options={})
    Removes the specified data element from the DICOM object. You can use this method
    if you are editing a DICOM object and wants to get rid of one or more elements.
    Element may be an array index, element name or element tag.
    The default behaviour of this method is to remove any encapsulated elements if a sequence
    or item is selected for removal. If for some reason you want to avoid this, user the :ignore_children option.
    Example 1: (Remove a sequence tag along with all its 'children' tags)
      obj.remove("Request Attributes Sequence")
    Example 2: (Remove a specific sequence tag only (not recommended unless you really know what you are doing))
      obj.remove("0040,0275", :ignore_children => true)

  remove_private
    Removes all private data elements from the DICOM object.

  set_value(value, element, options={})
    This method can be used both to edit an existing data element, or to create
    new data elements in your DICOM object.
    Element may be an array index, element name or element tag.
    Example 1: (Edit patient name)
      obj.set_value("Anonymous", "0010,0010", :create => false)
    Example 2: (Insert binary data for a specific tag)
      obj.set_value(data, 52, :bin => true, :create => false)
    Example 3: (Create a private data element)
      obj.set_value("Test", "0011,0010", :vr => "LO")
    Example 4: (Create/edit a data element in a specific item in a given sequence)
      items = obj.get_pos("FFFE,E000", :parent => "0040,0275")
      obj.set_value("CT1", "0040,0007", :parent => items.first)

  set_image(array)
    Encodes and inserts the content of your array to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.

  set_image_file(file)
    Inserts the binary content of a file to the Pixel Data tag in your DICOM object.
    This can be useful if you have processed some image data using a custom program
    and just wants to put that data back into a DICOM object.

  set_image_magick(object, options={})
    Encodes and inserts a RMagick image object to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.
    If pixel value rescaling is desired, this can be specified by using both the :min and :max options.
    NB! Because of rescaling when importing pixel values to a RMagick object, and the possible
    difference between presentation values and original pixel values, the use of set_image_magick() may
    result in pixel data that is completely different from what is expected.
    This method should be used only with great care: Do not be suprised if your resulting DICOM image looks strange!
    Example: (Encode an image object and requesting a specific pixel value range to be encoded)
      obj.set_image_magick(myImage, :min => -2000, :max => 3000)

  set_image_narray(object, options={})
    Encodes and inserts a NArray object to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.
    If pixel value rescaling is desired, this can be specified by using both the :min and :max options.
    Example: (Encode a numerical pixel data array and requesting a specific pixel value range to be encoded)
      obj.set_image_narray(myArray, :min => -2000, :max => 3000)

  write(file)
    Writes the DICOM object to the specified file.
    Example:
      obj.write(myPath + "test_file.dcm")


CLASS Anonymizer

PUBLIC CLASS METHODS

  new()
    Initialize a new Anonymizer instance.
    Example:
      a = DICOM::Anonymizer.new

ACCESSORS (Read & write)
  :blank
    A boolean that you can set as true if you want all anonymization tags to be blank
    instead of having some generic value.
  :enumeration
    A boolean that if set as true will make the script set enumerated values on anonymized tags,
    such that you are able to separate the DICOM files of unique individuals after anonymization.
    Example of fictious result:
      "Joe Sixpack" => "Person1" and "Joe Schmoe" => "Person2"
  :identity_file
    If you request enumeration, you can specify an identity file which will enable you to reidentify
    the anonymized DICOM files at a later stage. The relationship between original names and
    enumerated values is stored in a text file which you can keep for yourself, while handing out
    the anonymized DICOM files to a third party.
  :remove_private
    If this accessor is set as true, all private tags in the selected DICOM files will be removed.
    This can be useful if you are unsure whether the private tags contain sensitive data or not.
  :write_path
    You may set a different path for where the anonymized DICOM files will be stored. If this
    value is not set, the Anonymizer script will overwrite the old DICOM files.
    Example:
      a.write_path = "C:/temp/"

PUBLIC INSTANCE METHODS

  add_folder(path)
    Adds a folder who's files (including all files in subfolders) will be anonymized.
    Example:
      a.add_folder("/home/dicom")

  add_exception(path)
    Adds a folder who's files (including all files in its subfolders) will be excluded from anonymization.

  add_tag(tag, options={})
    Adds a tag to the list of tags that will be anonymized. As options you can specify value to be used
    and whether the tag should be included for enumeration if this feature has been activated.
    Example:
      a.add_tag("0010,0010, :value => "MrAnonymous", :enum => true)

  change_enum(tag, status)
    Sets enumeration status for a specific tag. Status = true means the selected tag will get
    an enumerated value, false means it will not.

  execute(verbose)
    Executes the anonymization process. Run this method when you are finished choosing all your settings.
    Verbose (=true/false) will apply to the read/update/write process that takes place in DObject, and not
    the messages of the Anonymization script itself.

  print
    Prints the list of tags that have been selected for anonymization, along with the values
    that the original tags will be replaced with. If enumeration is selected, this method will also
    print which tags have been selected for enumeration.

  remove_tag(tag)
    Removes a tag from the list of tags that will be anonymized.
    Example:
      a.remove_tag("0010,0010")


CLASS DClient

PUBLIC CLASS METHODS

  new(host_ip, port, options={})
    Initialize a new DClient instance.
    Example:
      node = DICOM::DClient.new("10.1.25.200", 104)

ACCESSORS (Read & write)
  :ae
    Calling application entity (name of the service class user - client).
  :host_ae
    Called application entity (name of the service class provider - server).
  :host_ip
    The host (server) ip adress.
  :max_package_size
    Maximum size of transferred network packages.
  :port
    Port number to be used in the network communication.
  :timeout
    Timeout (in seconds) to be used in the network communication.
  :verbose
    Verbosity with regards to notices and error messages (true or false).
ACCESSORS (Read only)
  :command_results
    An array holding any received command results.
  :data_results
    An array holding any received data results.
  :errors
    An array holding any error messages that have occurred in this session.
  :notices
    An array holding any informational messages presented in this session.

PUBLIC INSTANCE METHODS

  get_image(path, options={})
    Retrieve a DICOM image file from a server (C-GET-RQ) (this method is untested (might not work)).
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
    Example:
      node.get_image("/home/dicom/", "0008,0018" => sop_uid, "0020,000D" => study_uid, "0020,000E" => series_uid)

  find_images(options={})
    Query a server for DICOM images that matches your specified criteria.
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
      "0020,0013" (Instance Number)
    Example:
      result = node.find_images("0010,0020" => patient_id, "0020,000D" => study_uid, "0020,000E" => series_uid)

  find_patients(options={})
    Query a server for patients that matches your specified criteria.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0010,0010" (Patient's Name)
      "0010,0020" (Patient ID)
      "0010,0030" (Patient's Birth Date)
      "0010,0040" (Patient's Sex)
    Example:
      result = node.find_patients("0010,0010" => "James*")

  find_series(options={})
    Query a server for series that matches your specified criteria.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0008,0060" (Modality)
      "0008,103E" (Series Description)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
      "0020,0011" (Series Number)
    Example:
      result = node.find_series("0010,0020" => patient_id, "0020,000D" => study_uid)

  find_studies(options={})
    Query a server for studies that matches your specified criteria.
    Accepted options:
      "0008,0020" (Study Date)
      "0008,0030" (Study Time)
      "0008,0050" (Accession Number)
      "0008,0052" (Query/Retrieve Level)
      "0008,0090" (Referring Physician's Name)
      "0008,1030" (Study Description)
      "0008,1060" (Name of Physician(s) Reading Study)
      "0010,0010" (Patient's Name)
      "0010,0020" (Patient ID)
      "0010,0030" (Patient's Birth Date)
      "0010,0040" (Patient's Sex)
      "0020,000D" (Study Instance UID)
      "0020,0010" (Study ID)
    Example:
      result = node.find_studies("0008,0020" => study_date, "0010,000D" => patient_id)

  move_image(destination, options={})
    Move an image to a dicom node other than yourself.
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
    Example:
      node.move_image("MYDICOM", "0008,0018" => sop_uid, "0020,000D" => study_uid, "0020,000E" => series_uid)

  move_study(destination, options={})
    Move an entire study to a dicom node other than yourself.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0010,0020" (Patient ID)
      "0020,000D" (Study Instance UID)
    Example:
      node.move_study("MYDICOM", "0010,0020" => patient_id, "0020,000D" => study_uid)

  send(file_path)
    Send a DICOM file to a service class provider (SCP/PACS).
    Example:
      node.send("myFile.dcm")

  test
    Tests a connection with your DICOM server by trying a simple association.


CLASS DServer

PUBLIC CLASS METHODS

  new(port, options={})
    Initialize a new DServer instance.
    Example:
      server = DICOM::DServer.new(104)

ACCESSORS (Read & write)
  :host_ae
    Called application entity (name of the service class provider - server).
  :max_package_size
    Maximum size of transferred network packages.
  :port
    Port number to be used in the network communication.
  :timeout
    Timeout (in seconds) to be used in the network communication.
  :verbose
    Verbosity with regards to notices and error messages (true or false).
ACCESSORS (Read only)
  :errors
    An array holding any error messages that have occurred in this session.
  :notices
    An array holding any informational messages presented in this session.

PUBLIC INSTANCE METHODS

  add_abstract_syntax(value)
    Adds a specified abstract syntax to the list of syntaxes that is accepted by the server.

  print_syntaxes
    Prints the list of abstract syntaxes that is accepted by the server.

  remove_abstract_syntax(value)
    Removes a specified abstract syntax from the list of syntaxes that is accepted by the server.

  remove_all_abstract_syntaxes
    Completely clears the list of syntaxes that the server instance will accept.

  start_scp(path)
    Launch the simple storage server (Storage Content Provider - SCP).
